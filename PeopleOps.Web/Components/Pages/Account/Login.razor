@page "/Login"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using PeopleOps.Web.Components.Layout
@using PeopleOps.Web.Extensions
@using PeopleOps.Web.Services
@using Supabase.Gotrue
@using Client = Supabase.Client
@inject Client supabase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@layout LogInLayout
@rendermode InteractiveServer

<div style="" >
    <FluentGrid Justify="JustifyContent.Center" AdaptiveRendering="true">
        <FluentGridItem xs="12" sm="4" lg="3" md="3">
            <FluentCard Style="padding-left: 1.5rem; padding-right: 1.5rem;">
                <h2>Login</h2>
                <EditForm Model="@_loginModel" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <FluentTextField Label="Email" Style="width:100%;" @bind-Value="_loginModel.Email" Required="true">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral" />
                    </FluentTextField>
                    <FluentTextField Label="Password" Style="width:100%;" Type="password" Required="true" @bind-Value="_loginModel.Password">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Key())" Slot="start" Color="Color.Neutral" />
                    </FluentTextField>
                    <div style="text-align: center; padding:10px;">
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Login</FluentButton>
                    </div>
                </EditForm>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>
</div>


@code {
    private readonly LoginModel _loginModel = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [Inject]
    AuthService AuthService { get; set; } = default!;
    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;
    string userName = "";
    string password = "";

    string error;
    private async Task HandleValidSubmit()
    {
        var result = await AuthService.LoginAsync(_loginModel.Email, _loginModel.Password);
        
        if (result.IsSuccess)
        {
            var userIdentity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme);
            
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            NavigationManager.NavigateTo(string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl, true);
        }
        else
        {
            error = result.Errors.ToStringError();
           // _notificationService.Notify(NotificationSeverity.Error, "Error connecting", result.Errors.ToStringError());
        }
    }

    public class LoginModel
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
    
    protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
    {
       // var signInUrl = supabase.Auth.SignIn(Constants.Provider.Google);
        
        return  base.OnAfterRenderAsync(firstRender);
    }
}