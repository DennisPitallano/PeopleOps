@page "/"
@using Blazored.LocalStorage
@using Microsoft.Extensions.Caching.Hybrid
@using Microsoft.Extensions.Caching.Memory
@using Supabase.Gotrue
@using Client = Supabase.Client
@inject Client Supabase
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HybridCache Cache
@inject IMemoryCache MemoryCache
@inject ILocalStorageService  LocalStorageService;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
@*<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <p>Welcome, @pr.User.Claims.First(c=>c.Type == "email").Value</p>
        </Authorized>
        <NotAuthorized>
            <p>You are not authorized to view this page.</p>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>*@
@code
{
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await  LocalStorageService.GetItemAsync<string>("AccessToken");
            var tokena = await  LocalStorageService.GetItemAsync<string>("at");
            var pr = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var session =  MemoryCache.TryGetValue("authSession_", out Session? authSession);
            var session1 =  MemoryCache.TryGetValue("authSession", out Session? authSession1);
        }
        await base.OnAfterRenderAsync(firstRender);    
    }
}
