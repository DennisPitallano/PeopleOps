@using PeopleOps.Web.Features.Acknowledgements
@inject ISender Sender
@code {
    
    [Parameter]
    public long AcknowledgementId { get; set; }
    [Parameter]
    public int ProfileId { get; set; }
    
    private bool IsLiked { get; set; }
    
    private long AcknowledgementLikeId { get; set; }
    
    //create a callback parameter
    [Parameter]
    public EventCallback<bool> OnLike { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var query = new GetAcknowledgementLikeByLikerId.Query { LikerId = ProfileId, AcknowledgementId = AcknowledgementId };
        var result = await Sender.Send(query);
        if (result is { IsSuccess: true, Value: not null })
        {
            IsLiked = result.Value.AcknowledgmentId == AcknowledgementId;
            AcknowledgementLikeId = result.Value.Id;
        }
        await base.OnInitializedAsync();
    }

    private async Task LikeAcknowledgement()
    {
        if (IsLiked)
        {
            var command = new UnlikeAcknowledgement.Command { AcknowledgementLikeId = AcknowledgementLikeId };
            var result = await Sender.Send(command);
            if (result.IsSuccess)
            {
                IsLiked = false;
                await OnLike.InvokeAsync(IsLiked);
            }
        }
        else
        {
            var command = new LikeAcknowledgement.Command { LikerId = ProfileId, AcknowledgementId = AcknowledgementId };
            var result = await Sender.Send(command);
            if (result.IsSuccess)
            {
                IsLiked = true;
                await OnLike.InvokeAsync(IsLiked);
            }
        }
    }
}

<FluentButton IconEnd="@(IsLiked ? new Icons.Filled.Size16.ThumbLike() : new Icons.Regular.Size16.ThumbLike())"
              Title="Like"
              OnClick="() => LikeAcknowledgement()" />
