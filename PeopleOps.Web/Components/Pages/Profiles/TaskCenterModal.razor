@using MediatR
@using PeopleOps.Web.Contracts
@using PeopleOps.Web.Features.Attendance
@implements IDialogContentComponent<PeopleOps.Web.Contracts.ProfileResponse>
@inject ISender Sender
@*<FluentMessageBarProvider Section="@App.MESSAGES_DIALOG" MaxMessageCount="1" />

<p>Your lastname is @Content.Lastname and you are @Content.Age years young </p>*@

@*<FluentTextField @bind-Value="@Content.Firstname">Your firstname:</FluentTextField>
<FluentTextField @bind-Value="@Content.Lastname">Your lastname:</FluentTextField>
<FluentNumberField @bind-Value="@Content.Age">Your age:</FluentNumberField>*@
<FluentDialogHeader Visible="false" />
<FluentTabs ActiveTabId="tab-1" Size="TabSize.Large" Style="text-align:center">
    <FluentTab Id="tab-1" Style="padding-top:1rem;" >
        <Header>
            <FluentEmoji Value="@(new Emojis.TravelPlaces.Flat.Default.ThreeOClock())" Width="18"/>
            <span style="color:darkgreen;">
                Sign In
            </span>
        </Header>
        <Content>
            <FluentGrid Spacing="2" Justify="JustifyContent.Center">
                @foreach (var attendance in AttendanceResponses)
                {
                    <FluentGridItem>
                        <FluentCard MinimalStyle="true" Style="padding:15px;">
                            <FluentLabel Typo="Typography.H6">
                                @if (attendance.IsPresent)
                                {
                                    <FluentEmoji Value="@(new Emojis.Symbols.Flat.Default.CheckMark())" Slot="start" Width="18"/>
                                }
                                else
                                {
                                    <FluentEmoji Value="@(new Emojis.Symbols.Flat.Default.CrossMark())" Slot="start" Width="12"/>
                                }
                                @attendance.DisplayDate
                            </FluentLabel>
                            <FluentDivider Role="DividerRole.Presentation"></FluentDivider>
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="1"
                                         VerticalAlignment="VerticalAlignment.Center"
                                         HorizontalAlignment="HorizontalAlignment.Center" Style="margin-top:10px;">
                                @if (attendance.TimeIn != null)
                                {
                                    <div>
                                        <FluentButton Disabled="true"
                                                      IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                      Appearance="Appearance.Outline">
                                            @attendance.DisplayTimeIn
                                        </FluentButton>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <FluentButton IconEnd="@(new Icons.Regular.Size16.ClockAlarm())"
                                                      Appearance="Appearance.Accent">
                                            Sign in
                                        </FluentButton>
                                    </div>
                                }

                                @if (attendance is { TimeIn: not null, TimeOut: null })
                                {
                                    <div>
                                        <FluentButton IconEnd="@(new Icons.Regular.Size16.ClockAlarm())"
                                                      Appearance="Appearance.Accent">
                                            Sign out
                                        </FluentButton>
                                    </div>
                                }
                                @if (attendance.TimeOut != null)
                                {
                                    <div>
                                        <FluentButton Disabled="true"
                                                      IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                      Appearance="Appearance.Outline">
                                            @attendance.DisplayTimeOut
                                        </FluentButton>
                                    </div>
                                }

                            </FluentStack>
                            <FluentDivider Role="DividerRole.Presentation"></FluentDivider>
                        </FluentCard>
                    </FluentGridItem>
                }
            </FluentGrid>
        </Content>
    </FluentTab>
    <FluentTab Id="tab-2">
        <Header>
            <FluentEmoji Value="@(new Emojis.PeopleBody.Flat.Default.Technologist())" Width="18"/>
            <span style="color:chocolate;">
                Daily Task
            </span>
        </Header>
        <Content>
            Content 1
        </Content>
    </FluentTab>
    <FluentTab Id="tab-3">
        <Header>
            <FluentEmoji Value="@(new Emojis.Objects.Flat.Default.Calendar())" Width="18"/>
            <span style="color:chocolate;">
                Weekly Task
            </span>
        </Header>
        <Content>
            Content 2
        </Content>
    </FluentTab>
    <FluentTab Id="tab-4">
        <Header>
            <FluentEmoji Value="@(new Emojis.Objects.Flat.Default.Calendar())" Width="18"/>
            <span style="color:chocolate;">
                Monthly Task
            </span>
        </Header>
        <Content>
            Content 3
        </Content>
    </FluentTab>
</FluentTabs>
@*@if (Dialog != null)
{
    <FluentStack Orientation="Orientation.Vertical" Style="border: 1px solid red; padding: 10px">
        <span>This section is visible only when component is hosted inside a Dialog</span>
        <FluentButton OnClick="@(() => ToggleDialogPrimaryActionButton(true))">Enable Dialog Primary Action
        </FluentButton>
        <FluentButton OnClick="@(() => ToggleDialogPrimaryActionButton(false))">Disable Dialog Primary Action
        </FluentButton>
    </FluentStack>
}*@

@code {
    /*[Parameter]
    public SimplePerson Content { get; set; } = default!;*/

    [CascadingParameter] public FluentDialog? Dialog { get; set; }

    private void ToggleDialogPrimaryActionButton(bool enable)
    {
        Dialog!.TogglePrimaryActionButton(enable);
    }

    [Parameter] public ProfileResponse Content { get; set; }

    private List<AttendanceResponse> AttendanceResponses { get; set; } = new List<AttendanceResponse>();

    protected override async Task<Task> OnInitializedAsync()
    {
        //get the attendance of the user
        AttendanceResponses = await Sender.Send(new GetAttendanceByProfile.Query { ProfileId = 1 });

        return base.OnInitializedAsync();
    }

}