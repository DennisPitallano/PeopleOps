@using MediatR
@using PeopleOps.Web.Contracts
@using PeopleOps.Web.Features.Attendance
@using PeopleOps.Web.Features.Quest
@using Client = Supabase.Client
@using Supabase.Gotrue
@implements IDialogContentComponent<PeopleOps.Web.Contracts.ProfileResponse>
@inject ISender Sender
@inject IDialogService DialogService
@rendermode InteractiveServer
@inject Client Supabase

@code {
    [CascadingParameter] public FluentDialog? Dialog { get; set; }

    [Parameter] public required ProfileResponse Content { get; set; }

    private List<AttendanceTableResponse> AttendanceResponses { get; set; } = [];

    private List<QuestTableResponse> DailyQuestResponses { get; set; } = [];
    private List<QuestTableResponse> DailyMainQuests { get; set; } = [];
    private List<QuestTableResponse> DailySideQuests { get; set; } = [];

    private List<QuestTableResponse> WeeklyQuestResponses { get; set; } = [];
    private List<QuestTableResponse> WeeklyMainQuests { get; set; } = [];
    private List<QuestTableResponse> WeeklySideQuests { get; set; } = [];

    private List<QuestTableResponse> MonthlyQuestResponses { get; set; } = [];
    private List<QuestTableResponse> MonthlyMainQuests { get; set; } = [];
    private List<QuestTableResponse> MonthlySideQuests { get; set; } = [];

    User? _user = new();

    string? _activeTabId = "tab-attendance";
    bool _isLoading;

    protected override async Task<Task> OnInitializedAsync()
    {
        _user = Supabase.Auth.CurrentUser;
        //get the attendance of the user
        AttendanceResponses = await Sender.Send(new GetWeeklyAttendanceByUser.Query { userid = Content.Id });

        await LoadDailyQuests();
        // load weekly quests
        await LoadWeeklyQuests();
        // load monthly quests
        await LoadMonthlyQuests();

        return base.OnInitializedAsync();
    }

    private Task OnTabChange(FluentTab obj)
    {
        _activeTabId = obj.Id;
        return Task.CompletedTask;
    }

    // initialize the weekly attendance
    private async Task InitializeWeeklyAttendance()
    {
        //generate the weekly attendance
        var isGenerated = await Sender.Send(new GenerateWeeklyAttendanceByUser.Command { userid = Content.Id });

        if (isGenerated)
        {
            //refresh the attendance
            AttendanceResponses = await Sender.Send(new GetWeeklyAttendanceByUser.Query { userid = Content.Id });
        }
    }

    private async Task LoadDailyQuests()
    {
        //get daily quests
        DailyQuestResponses = await Sender.Send(new GetDailyQuestsByUser.Query { userid = Content.Id, questgroup = "daily" });

        //main quests
        DailyMainQuests = DailyQuestResponses.Where(x => x.IsMainQuest).ToList();
        //side quests
        DailySideQuests = DailyQuestResponses.Where(x => !x.IsMainQuest).ToList();
    }

    private async Task LoadWeeklyQuests()
    {
        //get weekly quests
        WeeklyQuestResponses = await Sender.Send(new GetWeeklyQuestsByUser.Query { userid = Content.Id, questgroup = "weekly" });

        //main quests
        WeeklyMainQuests = WeeklyQuestResponses.Where(x => x.IsMainQuest).ToList();
        //side quests
        WeeklySideQuests = WeeklyQuestResponses.Where(x => !x.IsMainQuest).ToList();
    }

    private async Task LoadMonthlyQuests()
    {
        //get monthly quests
        MonthlyQuestResponses = await Sender.Send(new GetMonthlyQuestsByUser.Query { userid = Content.Id, questgroup = "monthly" });

        //main quests
        MonthlyMainQuests = MonthlyQuestResponses.Where(x => x.IsMainQuest).ToList();
        //side quests
        MonthlySideQuests = MonthlyQuestResponses.Where(x => !x.IsMainQuest).ToList();
    }

    // initialize the daily quests
    private async Task InitializeDailyQuests()
    {
        //get daily quests
        var isGenerated = await Sender.Send(new GenerateDailyQuest.Command { userid = Content.Id });

        if (isGenerated)
        {
            await LoadDailyQuests();
        }

        StateHasChanged();
    }

    // initialize the weekly quests
    private async Task InitializeWeeklyQuests()
    {
        //get weekly quests
        var isGenerated = await Sender.Send(new GenerateWeeklyQuest.Command { userid = Content.Id });

        if (isGenerated)
        {
            await LoadWeeklyQuests();
        }

        StateHasChanged();
    }

    // initialize the monthly quests
    private async Task InitializeMonthlyQuests()
    {
        //get monthly quests
        var isGenerated = await Sender.Send(new GenerateMonthlyQuest.Command { UserId = Content.Id });

        if (isGenerated)
        {
            await LoadMonthlyQuests();
        }

        StateHasChanged();
    }

    private async Task SetQuestAsInProgress(QuestTableResponse quest)
    {
        _isLoading = true;
        var isSuccess = await Sender.Send(new SetQuestStatus.Command { Id = quest.Id, Status = true });
        if (isSuccess)
        {
            await ReloadQuests(quest.QuestGroup);
        }
        _isLoading = false;
        StateHasChanged();
    }

    private async Task CancelQuest(QuestTableResponse quest)
    {
        _isLoading = true;
        var isSuccess = await Sender.Send(new SetQuestStatus.Command { Id = quest.Id, Status = false });
        if (isSuccess)
        {
            await ReloadQuests(quest.QuestGroup);
        }
        _isLoading = false;
        StateHasChanged();
    }
    
    // complete the quest
    private async Task CompleteQuest(QuestTableResponse quest)
    {
        _isLoading = true;
        var isSuccess = await Sender.Send(new CompleteQuest.Command { Id = quest.Id });
        if (isSuccess)
        {
            await ReloadQuests(quest.QuestGroup);
        }
        _isLoading = false;
        
        var dialog = await ShowSuccessMessageBox();
        StateHasChanged();
    }

    private async Task ReloadQuests(string questGroup)
    {
        switch (questGroup)
        {
            case "weekly":
            case "special-weekly":
                await LoadWeeklyQuests();
                break;
            case "monthly":
            case "special-monthly":
                await LoadMonthlyQuests();
                break;
            case "daily":
            case "special-daily":
                await LoadDailyQuests();
                break;
        }
    }

    // sign out
    private async Task SignOutAsync(int attendanceId)
    {
        await Sender.Send(new SignOutAttendance.Command { Id = attendanceId });
        //refresh the attendance
        AttendanceResponses = await Sender.Send(new GetWeeklyAttendanceByUser.Query { userid = Content.Id });
        var dialog = await ShowSuccessMessageBox();
        StateHasChanged();
    }

    // sign in
    private async Task SigninAsync(int attendanceId)
    {
        await Sender.Send(new SignInAttendance.Command { Id = attendanceId });
        //refresh the attendance
        AttendanceResponses = await Sender.Send(new GetWeeklyAttendanceByUser.Query { userid = Content.Id });

        //show message box that the user has signed in successfully with conffeti emoji
        var dialog = await ShowSuccessMessageBox();
        StateHasChanged();
    }
    
    private async Task<IDialogReference> ShowSuccessMessageBox()
    {
        return await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
        {
            Content = new MessageBoxContent
            {
                MarkupMessage = new MarkupString("<span style='font-size:7rem;'>\ud83c\udf89</span>"),
                IconColor = Color.Success,
            },
            PrimaryAction = "",
            SecondaryAction = "Hooray!🥳",
            Width = "170px",
            Height = "170px",
            TrapFocus = false,
            PreventDismissOnOverlayClick = false,
            Alignment = HorizontalAlignment.Start,
        });
    }

}

<FluentDialogHeader Visible="false"/>
<FluentTabs ActiveTabId="@_activeTabId" OnTabChange="OnTabChange" Size="TabSize.Large" Style="text-align:center">
    <FluentTab Id="tab-attendance" Style="padding-top:1rem;">
        <Header>
            <FluentEmoji Value="@(new Emojis.TravelPlaces.Flat.Default.ThreeOClock())" Width="18"/>
            <span style="color:darkgreen;">
                Sign In
            </span>
        </Header>
        <Content>
            <FluentGrid Spacing="2" Justify="JustifyContent.Center">
                @if (AttendanceResponses.Count == 0)
                {
                    <FluentStack Orientation="Orientation.Vertical"
                                 VerticalAlignment="VerticalAlignment.Center"
                                 VerticalGap="2" Style="padding:1rem;"
                                 HorizontalAlignment="HorizontalAlignment.Center">
                        <FluentLabel Typo="Typography.H6" Alignment="HorizontalAlignment.Center"
                                     Style="margin-bottom:15px;">
                            Are you ready to sign in?
                        </FluentLabel>
                        <FluentButton OnClick="() => InitializeWeeklyAttendance()"
                                      IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                      Appearance="Appearance.Accent">
                            I'm ready!
                        </FluentButton>
                    </FluentStack>
                }
                else
                {
                    foreach (var attendance in AttendanceResponses)
                    {
                        <FluentGridItem xs="4">
                            <FluentCard MinimalStyle="true" Style="@attendance.NotCurrentDayStyle"
                                        AreaRestricted="false">
                                <FluentLabel Typo="Typography.H6" Alignment="HorizontalAlignment.Center">
                                    @if (attendance.IsPresent)
                                    {
                                        <FluentEmoji Style="margin-right:3px;"
                                                     Value="@(new Emojis.Activities.Color.Default.ConfettiBall())"
                                                     Slot="start" Width="22"/>
                                    }
                                    <FluentLabel>
                                        @attendance.DisplayDate
                                    </FluentLabel>
                                </FluentLabel>
                                <FluentDivider Role="DividerRole.Presentation"></FluentDivider>
                                @if (attendance.IsMissedThisDay)
                                {
                                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="1"
                                                 VerticalAlignment="VerticalAlignment.Center"
                                                 HorizontalAlignment="HorizontalAlignment.Center"
                                                 Style="margin-top:10px;">
                                        <img src="assets/media/images/absent.png" style="width:100px;" alt="missed"/>
                                        <div>
                                            <FluentStack HorizontalGap="1" Style="padding:3px;"
                                                         Orientation="Orientation.Horizontal"
                                                         VerticalAlignment="VerticalAlignment.Center">
                                                <FluentBadge Circular=true Appearance="Appearance.Neutral">
                                                    <img alt="" width="30" class="h-10 max-w-full"
                                                         src="/assets/media/images/gamer-coin.svg">
                                                    <FluentLabel Typo="Typography.H4" Style="color:darkgoldenrod;">0
                                                    </FluentLabel>
                                                </FluentBadge>
                                            </FluentStack>
                                        </div>
                                    </FluentStack>
                                }
                                else
                                {
                                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="1"
                                                 VerticalAlignment="VerticalAlignment.Center"
                                                 HorizontalAlignment="HorizontalAlignment.Center"
                                                 Style="margin-top:10px;">
                                        @if (attendance.TimeIn != null)
                                        {
                                            <div>
                                                <FluentButton Id="@attendance.DisplayTimeInId"
                                                              IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                              Appearance="Appearance.Stealth">
                                                    <FluentBadge Appearance="Appearance.Accent">
                                                        @attendance.DisplayTimeIn
                                                    </FluentBadge>
                                                </FluentButton>
                                                <FluentTooltip Anchor="@attendance.DisplayTimeInId"
                                                               HideTooltipOnCursorLeave="true"
                                                               Position=TooltipPosition.Top
                                                               Delay=200>Time In
                                                </FluentTooltip>
                                            </div>
                                        }
                                        else
                                        {
                                            <div>
                                                <FluentButton OnClick="() => SigninAsync(attendance.Id)"
                                                              Disabled="@(!attendance.IsCurrentDay)"
                                                              IconEnd="@(new Icons.Regular.Size16.ClockAlarm())"
                                                              Appearance="Appearance.Accent">
                                                    Sign in
                                                </FluentButton>
                                            </div>
                                        }

                                        @if (attendance is { TimeIn: not null, TimeOut: null })
                                        {
                                            <div>
                                                <FluentButton OnClick="() => SignOutAsync(attendance.Id)"
                                                              IconEnd="@(new Icons.Regular.Size16.ClockAlarm())"
                                                              Appearance="Appearance.Outline" Color="darkred">
                                                    Sign out
                                                </FluentButton>
                                            </div>
                                        }
                                        @if (attendance.TimeOut != null)
                                        {
                                            <div>
                                                <FluentButton Id="@attendance.DisplayTimeOutId" Color="green"
                                                              Style="font-weight:bold;"
                                                              IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                              Appearance="Appearance.Stealth">
                                                    <FluentBadge Appearance="Appearance.Accent">
                                                        @attendance.DisplayTimeOut
                                                    </FluentBadge>
                                                </FluentButton>
                                                <FluentTooltip Anchor="@attendance.DisplayTimeOutId"
                                                               HideTooltipOnCursorLeave="true"
                                                               Position=TooltipPosition.Top
                                                               Delay=200>Time Out
                                                </FluentTooltip>
                                            </div>
                                        }
                                        @*<div>
                                    <FluentButton IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                  Appearance="Appearance.Outline">
                                        @attendance.DisplayTotalHours
                                    </FluentButton>
                                </div>*@
                                        <div>
                                            <FluentStack HorizontalGap="1" Style="padding:3px;"
                                                         Orientation="Orientation.Horizontal"
                                                         VerticalAlignment="VerticalAlignment.Center">
                                                <FluentBadge Circular=true Appearance="Appearance.Neutral">
                                                    <img alt="" width="30" class="h-10 max-w-full"
                                                         src="/assets/media/images/gamer-coin.svg">
                                                    <FluentLabel Typo="Typography.H4" Style="color:darkgoldenrod;">5
                                                    </FluentLabel>
                                                </FluentBadge>
                                            </FluentStack>
                                        </div>
                                    </FluentStack>
                                }
                            </FluentCard>
                        </FluentGridItem>
                    }
                }
            </FluentGrid>
        </Content>
    </FluentTab>
    <FluentTab Id="tab-daily" DeferredLoading="true">
        <Header>
            <FluentEmoji Value="@(new Emojis.PeopleBody.Flat.Default.Technologist())" Width="18"/>
            <span style="color:chocolate;">
                Daily
            </span>
        </Header>
        <LoadingContent>
            <div style="text-align:center; padding:10px;">
                <FluentProgressRing/>
            </div>
        </LoadingContent>
        <Content>
            <FluentGrid Spacing="2" Justify="JustifyContent.SpaceAround">
                <Quests MainQuests="DailyMainQuests"
                        SideQuests="DailySideQuests"
                        InitializeQuests="InitializeDailyQuests"
                        SetQuestAsInProgress="SetQuestAsInProgress"
                        CancelQuest="CancelQuest"
                        IsLoading="_isLoading"
                        CompleteQuest="CompleteQuest"/>
            </FluentGrid>
        </Content>
    </FluentTab>
    <FluentTab Id="tab-weekly">
        <Header>
            <FluentEmoji Value="@(new Emojis.Objects.Flat.Default.Calendar())" Width="18"/>
            <span style="color:chocolate;">
                Weekly
            </span>
        </Header>
        <Content>
            <FluentGrid Spacing="2" Justify="JustifyContent.SpaceAround">
                <Quests MainQuests="WeeklyMainQuests"
                        SideQuests="WeeklySideQuests"
                        InitializeQuests="InitializeWeeklyQuests"
                        SetQuestAsInProgress="SetQuestAsInProgress"
                        CancelQuest="CancelQuest"
                        IsLoading="_isLoading" 
                        CompleteQuest="CompleteQuest"/>
            </FluentGrid>
        </Content>
    </FluentTab>
    <FluentTab Id="tab-monthly">
        <Header>
            <FluentEmoji Value="@(new Emojis.Objects.Flat.Default.Calendar())" Width="18"/>
            <span style="color:chocolate;">
                Monthly
            </span>
        </Header>
        <Content>
            <FluentGrid Spacing="2" Justify="JustifyContent.SpaceAround">
                <Quests MainQuests="MonthlyMainQuests"
                        SideQuests="MonthlySideQuests"
                        InitializeQuests="InitializeMonthlyQuests"
                        SetQuestAsInProgress="SetQuestAsInProgress"
                        CancelQuest="CancelQuest"
                        IsLoading="_isLoading" 
                        CompleteQuest="CompleteQuest"/>
            </FluentGrid>
        </Content>
    </FluentTab>
</FluentTabs>