@using MediatR
@using PeopleOps.Web.Contracts
@using PeopleOps.Web.Features.Attendance
@implements IDialogContentComponent<PeopleOps.Web.Contracts.ProfileResponse>
@inject ISender Sender
@inject IDialogService DialogService
@rendermode InteractiveServer
@*<FluentMessageBarProvider Section="@App.MESSAGES_DIALOG" MaxMessageCount="1" />

<p>Your lastname is @Content.Lastname and you are @Content.Age years young </p>*@

@*<FluentTextField @bind-Value="@Content.Firstname">Your firstname:</FluentTextField>
<FluentTextField @bind-Value="@Content.Lastname">Your lastname:</FluentTextField>
<FluentNumberField @bind-Value="@Content.Age">Your age:</FluentNumberField>*@
<FluentDialogHeader Visible="false"/>
<FluentTabs ActiveTabId="tab-1" Size="TabSize.Large" Style="text-align:center">
    <FluentTab Id="tab-1" Style="padding-top:1rem;">
        <Header>
            <FluentEmoji Value="@(new Emojis.TravelPlaces.Flat.Default.ThreeOClock())" Width="18"/>
            <span style="color:darkgreen;">
                Sign In
            </span>
        </Header>
        <Content>
            <FluentGrid Spacing="2" Justify="JustifyContent.Center">
                @foreach (var attendance in AttendanceResponses)
                {
                    <FluentGridItem>
                        <FluentCard MinimalStyle="true" Style="@attendance.NotCurrentDayStyle" AreaRestricted="false">
                            <FluentLabel Typo="Typography.H6" Alignment="HorizontalAlignment.Center">
                                @if (attendance.IsPresent)
                                {
                                    <FluentEmoji Style="margin-right:3px;"
                                                 Value="@(new Emojis.Activities.Color.Default.ConfettiBall())"
                                                 Slot="start" Width="18"/>
                                }
                                @attendance.DisplayDate
                            </FluentLabel>
                            <FluentDivider Role="DividerRole.Presentation"></FluentDivider>
                            @if (attendance.IsMissedThisDay)
                            {
                                <FluentStack Orientation="Orientation.Vertical" VerticalGap="1"
                                             VerticalAlignment="VerticalAlignment.Center"
                                             HorizontalAlignment="HorizontalAlignment.Center" Style="margin-top:10px;">
                                    <img src="assets/media/images/absent.png" style="width:100px;" alt="missed"/>
                                    <div>
                                        <FluentStack HorizontalGap="1" Style="padding:3px;"
                                                     Orientation="Orientation.Horizontal"
                                                     VerticalAlignment="VerticalAlignment.Center">
                                            <FluentBadge Circular=true Appearance="Appearance.Neutral">
                                                <img alt="" width="30" class="h-10 max-w-full"
                                                     src="/assets/media/images/gamer-coin.svg">
                                                <FluentLabel Typo="Typography.H4" Style="color:darkgoldenrod;">0
                                                </FluentLabel>
                                            </FluentBadge>
                                        </FluentStack>
                                    </div>
                                </FluentStack>
                            }
                            else
                            {
                                <FluentStack Orientation="Orientation.Vertical" VerticalGap="1"
                                             VerticalAlignment="VerticalAlignment.Center"
                                             HorizontalAlignment="HorizontalAlignment.Center" Style="margin-top:10px;">
                                    @if (attendance.TimeIn != null)
                                    {
                                        <div>
                                            <FluentButton Id="@attendance.DisplayTimeInId"
                                                          IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                          Appearance="Appearance.Stealth">
                                                <FluentBadge Appearance="Appearance.Accent">
                                                    @attendance.DisplayTimeIn
                                                </FluentBadge>
                                            </FluentButton>
                                            <FluentTooltip Anchor="@attendance.DisplayTimeInId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Time In</FluentTooltip>
                                        </div>
                                    }
                                    else
                                    {
                                        <div>
                                            <FluentButton OnClick="SigninAsync" Disabled="@(!attendance.IsCurrentDay)"
                                                          IconEnd="@(new Icons.Regular.Size16.ClockAlarm())"
                                                          Appearance="Appearance.Accent">
                                                Sign in
                                            </FluentButton>
                                        </div>
                                    }

                                    @if (attendance is { TimeIn: not null, TimeOut: null })
                                    {
                                        <div>
                                            <FluentButton OnClick="SignOutAsync" IconEnd="@(new Icons.Regular.Size16.ClockAlarm())"
                                                          Appearance="Appearance.Outline" Color="darkred" >
                                                Sign out
                                            </FluentButton>
                                        </div>
                                    }
                                    @if (attendance.TimeOut != null)
                                    {
                                        <div>
                                            <FluentButton Id="@attendance.DisplayTimeOutId" Color="green"  Style="font-weight:bold;"
                                                          IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                          Appearance="Appearance.Stealth">
                                                <FluentBadge Appearance="Appearance.Accent">
                                                    @attendance.DisplayTimeOut
                                                </FluentBadge>
                                            </FluentButton>
                                            <FluentTooltip Anchor="@attendance.DisplayTimeOutId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Time Out</FluentTooltip>
                                        </div>
                                    }
                                    @*<div>
                                    <FluentButton IconEnd="@(new Icons.Regular.Size16.CalendarCheckmark())"
                                                  Appearance="Appearance.Outline">
                                        @attendance.DisplayTotalHours
                                    </FluentButton>
                                </div>*@
                                    <div>
                                        <FluentStack HorizontalGap="1" Style="padding:3px;"
                                                     Orientation="Orientation.Horizontal"
                                                     VerticalAlignment="VerticalAlignment.Center">
                                            <FluentBadge Circular=true Appearance="Appearance.Neutral">
                                                <img alt="" width="30" class="h-10 max-w-full"
                                                     src="/assets/media/images/gamer-coin.svg">
                                                <FluentLabel Typo="Typography.H4" Style="color:darkgoldenrod;">5
                                                </FluentLabel>
                                            </FluentBadge>
                                        </FluentStack>
                                    </div>
                                </FluentStack>
                            }
                        </FluentCard>
                    </FluentGridItem>
                }
            </FluentGrid>
        </Content>
    </FluentTab>
    <FluentTab Id="tab-2">
        <Header>
            <FluentEmoji Value="@(new Emojis.PeopleBody.Flat.Default.Technologist())" Width="18"/>
            <span style="color:chocolate;">
                Daily Tasks
            </span>
        </Header>
        <Content>
            Content 1
        </Content>
    </FluentTab>
    <FluentTab Id="tab-3">
        <Header>
            <FluentEmoji Value="@(new Emojis.Objects.Flat.Default.Calendar())" Width="18"/>
            <span style="color:chocolate;">
                Weekly Tasks
            </span>
        </Header>
        <Content>
            Content 2
        </Content>
    </FluentTab>
    <FluentTab Id="tab-4">
        <Header>
            <FluentEmoji Value="@(new Emojis.Objects.Flat.Default.Calendar())" Width="18"/>
            <span style="color:chocolate;">
                Monthly Tasks
            </span>
        </Header>
        <Content>
            Content 3
        </Content>
    </FluentTab>
</FluentTabs>
@*@if (Dialog != null)
{
    <FluentStack Orientation="Orientation.Vertical" Style="border: 1px solid red; padding: 10px">
        <span>This section is visible only when component is hosted inside a Dialog</span>
        <FluentButton OnClick="@(() => ToggleDialogPrimaryActionButton(true))">Enable Dialog Primary Action
        </FluentButton>
        <FluentButton OnClick="@(() => ToggleDialogPrimaryActionButton(false))">Disable Dialog Primary Action
        </FluentButton>
    </FluentStack>
}*@

@code {
    /*[Parameter]
    public SimplePerson Content { get; set; } = default!;*/

    [CascadingParameter] public FluentDialog? Dialog { get; set; }

    private void ToggleDialogPrimaryActionButton(bool enable)
    {
        Dialog!.TogglePrimaryActionButton(enable);
    }

    [Parameter] public ProfileResponse Content { get; set; }

    private List<AttendanceResponse> AttendanceResponses { get; set; } = new List<AttendanceResponse>();

    protected override async Task<Task> OnInitializedAsync()
    {
        //get the attendance of the user
        AttendanceResponses = await Sender.Send(new GetAttendanceByProfile.Query { ProfileId = 1 });

        return base.OnInitializedAsync();
    }
    
    // sign out
    private async Task SignOutAsync()
    {
        await Sender.Send(new SignOutAttendance.Command { Id = 13 });
        
        //refresh the attendance
        AttendanceResponses = await Sender.Send(new GetAttendanceByProfile.Query { ProfileId = 1 });
        
        StateHasChanged();
    }
    
    // sign in
    private async Task SigninAsync()
    {
        await Sender.Send(new SignInAttendance.Command { Id = 13 });
        
        //refresh the attendance
        AttendanceResponses = await Sender.Send(new GetAttendanceByProfile.Query { ProfileId = 1 });
        
        //show message box that the user has signed in successfully with conffeti emoji
        var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
        {
            Content = new MessageBoxContent
            {
                MarkupMessage = new MarkupString("<span style='font-size:7rem;'>\ud83c\udf89</span>"),
               // MarkupMessage = new MarkupString("<img src='assets/media/images/congratulations.gif' style='font-size:10rem; width:150px; height:50;' />"),
                IconColor = Color.Success,
            },
            PrimaryAction = "",
            SecondaryAction ="Hooray!🥳",
            Width = "170px",
            Height = "170px",
            TrapFocus =false,
            PreventDismissOnOverlayClick = false,
            Alignment = HorizontalAlignment.Start,
        });
        StateHasChanged();
    }

}